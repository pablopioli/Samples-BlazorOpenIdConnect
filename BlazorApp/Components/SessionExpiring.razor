@inject Sotsera.Blazor.Oidc.IUserManager UserManager

@if (Shown)
{
    <style> body { overflow: hidden } body .modal { overflow-x: hidden; overflow-y: auto } </style>
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header alert-danger">
                    <h5 class="modal-title">Authentication session is expired</h5>
                </div>
                <div class="modal-body">
                    <p>
                        You can perform a popup login and mantain your current work
                        or update the page to the unauthenticated state
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="LoginAgain">Login again</button>
                    <button type="button" class="btn btn-warning" @onclick="Reload">Update</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    bool Shown { get; set; }

    void LoginAgain() => UserManager.BeginAuthenticationAsync();

    void Reload()
    {
        UserManager.BeginLogoutAsync();
        Shown = false;
    }

    protected override void OnInitialized()
    {
        UserManager.OnUserSessionExpiring += args =>
        {
            Shown = true;
            InvokeAsync(StateHasChanged);
            args.Cancel = true;
        };

        UserManager.UserChanged += user =>
        {
            if (Shown) Shown = user == null;
            InvokeAsync(StateHasChanged);
        };
    }
}